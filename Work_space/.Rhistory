n.col <- n.col2[,2]
N <- which(matrice==x-1,arr.ind=TRUE)
if (n.row==1) N=c(NA,NA)
E <- which(matrice==x+nrow(matrice),arr.ind=TRUE)
if (n.col==ncol(matrice)) E=c(NA,NA)
S <- which(matrice==x+1,arr.ind=TRUE)
if (n.row==nrow(matrice)) S=c(NA,NA)
W <- which(matrice==x-nrow(matrice),arr.ind=TRUE)
if (n.col==1) W=c(NA,NA)
location_neigh_x <-  matrix(c(N,E,S,W),nrow=4, byrow = TRUE)
row.names(location_neigh_x) <- c("N","E","S","W")
colnames(location_neigh_x) <- c("x","y")
return(location_neigh_x)
}
location <- location(indices)
colnames(location) <- 1:ncol(location)
test_matgc <- function(matrice){
n <- rep(1:length(matrice),each=4)
x <- rep(1:4, times=length(matrice))
test_matgc <- matrix(c(n,location[x,n]))
return(test_matgc)
}
location_poids <- function(matrice){
matrice2 <- mat.pad(matrice)
x <- 1:length(matrice)
ind_row <- 2:(nrow(matrice)+1)
ind_col <- 2:(ncol(matrice)+1)
N  = abs(as.vector(matrice2[ind_row - 1, ind_col    ]) + as.vector(matrice2[ind_row,ind_col]))
E  = abs(as.vector(matrice2[ind_row    , ind_col + 1]) + as.vector(matrice2[ind_row,ind_col]))
S  = abs(as.vector(matrice2[ind_row + 1, ind_col    ]) + as.vector(matrice2[ind_row,ind_col]))
W  = abs(as.vector(matrice2[ind_row    , ind_col - 1]) + as.vector(matrice2[ind_row,ind_col]))
if (length(N) == 0) N=c(NA,NA)
if (length(E) == 0) E=c(NA,NA)
if (length(S) == 0) S=c(NA,NA)
if (length(W) == 0) W=c(NA,NA)
neigh =  rbind(N,E,S,W)
return(neigh[,x])
}
poids2 <- location_poids(poids)
poids3 <- abs(poids2)
n <- rep(1:ncol(location),each=4)
n2 <- rep(1:ncol(poids2),each=4)
x <- seq(1:(length(location)))
x2 <- seq(1:(length(poids2)))
test_matgc <- matrix(c(n,location[x]),ncol=2)
test_poidsgc <- matrix(c(n2,poids3[x]),ncol=2)
mat_gc_test <- cbind(test_matgc,test_poidsgc[,2])
(which(is.na(mat_gc_test[,2]),arr.ind=TRUE))
mat_gc <- mat_gc_test[-(which(is.na(mat_gc_test[,2]),arr.ind=TRUE)),]
colnames(mat_gc) <- c("Noeud 1", "Noeud 2", "Poids")
matriceGC2 <- subset(mat_gc, mat_gc[,1] < mat_gc[,2])
nodes <- 1:(length(poids)+2)
source <- cbind(c(rep((length(nodes)-1),each=100)),
seq(1:1000),
100000)
sink <- cbind(c(rep(length(nodes),each=100)),
3001:4000,
100000)
source <- cbind(c(rep((length(nodes)-1),each=100)),
seq(1:100),
100000)
sink <- cbind(c(rep(length(nodes),each=100)),
3901:4000,
100000)
View(sink)
library(optrees)
library(igraph)
matrice1 <- matrix(sample(1:10000),100,100)
matrice2 <- matrix(sample(1:10000),100,100)
split_col <- function(mat,y,n.col){
mat2 <- matrix(mat[,y:((y+n.col)-1)],nrow=nrow(mat),ncol=n.col)
return(mat2)
}
patch1A <- split_col(matrice1,1,50)
patch2A <- split_col(matrice1,51,50)
patch1B <- split_col(matrice2,1,50)
patch2B <- split_col(matrice2,51,50)
overlap1 <- patch1A[,31:50]-patch1B[,31:50]
overlap2 <- patch2A[,1:20]-patch2B[,1:20]
poids <- matrix(c(overlap1,overlap2),ncol=(ncol(overlap1)+ncol(overlap2)))
indices <- matrix(1:length(poids),ncol=ncol(poids))
mat.pad <- function(mat1){
na1 <- matrix(NA,ncol=1,nrow=nrow(mat1))
mat2 <- matrix(c(na1,mat1,na1),nrow=nrow(mat1),ncol=ncol(mat1)+2)
na2 <- matrix(NA,nrow=1,ncol=ncol(mat2))
mat3 <- rbind(na2,mat2,na2)
return(mat3)
}
location <- function(matrice){
matrice2 <- mat.pad(matrice)
x <- 1:length(matrice)
ind_row <- 2:(nrow(matrice)+1)
ind_col <- 2:(ncol(matrice)+1)
neigh = rbind(N  = as.vector(matrice2[ind_row - 1, ind_col    ]),
E  = as.vector(matrice2[ind_row    , ind_col + 1]),
S  = as.vector(matrice2[ind_row + 1, ind_col    ]),
W  = as.vector(matrice2[ind_row    , ind_col - 1]))
return(neigh[,x])
}
indice <- function(matrice,x){
n.row2 <- which(matrice==x, arr.ind=TRUE)
n.col2 <- which(matrice==x, arr.ind=TRUE)
n.row <- n.row2[,1]
n.col <- n.col2[,2]
N <- which(matrice==x-1,arr.ind=TRUE)
if (n.row==1) N=c(NA,NA)
E <- which(matrice==x+nrow(matrice),arr.ind=TRUE)
if (n.col==ncol(matrice)) E=c(NA,NA)
S <- which(matrice==x+1,arr.ind=TRUE)
if (n.row==nrow(matrice)) S=c(NA,NA)
W <- which(matrice==x-nrow(matrice),arr.ind=TRUE)
if (n.col==1) W=c(NA,NA)
location_neigh_x <-  matrix(c(N,E,S,W),nrow=4, byrow = TRUE)
row.names(location_neigh_x) <- c("N","E","S","W")
colnames(location_neigh_x) <- c("x","y")
return(location_neigh_x)
}
location <- location(indices)
colnames(location) <- 1:ncol(location)
test_matgc <- function(matrice){
n <- rep(1:length(matrice),each=4)
x <- rep(1:4, times=length(matrice))
test_matgc <- matrix(c(n,location[x,n]))
return(test_matgc)
}
location_poids <- function(matrice){
matrice2 <- mat.pad(matrice)
x <- 1:length(matrice)
ind_row <- 2:(nrow(matrice)+1)
ind_col <- 2:(ncol(matrice)+1)
N  = abs(as.vector(matrice2[ind_row - 1, ind_col    ]) + as.vector(matrice2[ind_row,ind_col]))
E  = abs(as.vector(matrice2[ind_row    , ind_col + 1]) + as.vector(matrice2[ind_row,ind_col]))
S  = abs(as.vector(matrice2[ind_row + 1, ind_col    ]) + as.vector(matrice2[ind_row,ind_col]))
W  = abs(as.vector(matrice2[ind_row    , ind_col - 1]) + as.vector(matrice2[ind_row,ind_col]))
if (length(N) == 0) N=c(NA,NA)
if (length(E) == 0) E=c(NA,NA)
if (length(S) == 0) S=c(NA,NA)
if (length(W) == 0) W=c(NA,NA)
neigh =  rbind(N,E,S,W)
return(neigh[,x])
}
poids2 <- location_poids(poids)
poids3 <- abs(poids2)
n <- rep(1:ncol(location),each=4)
n2 <- rep(1:ncol(poids2),each=4)
x <- seq(1:(length(location)))
x2 <- seq(1:(length(poids2)))
test_matgc <- matrix(c(n,location[x]),ncol=2)
test_poidsgc <- matrix(c(n2,poids3[x]),ncol=2)
mat_gc_test <- cbind(test_matgc,test_poidsgc[,2])
(which(is.na(mat_gc_test[,2]),arr.ind=TRUE))
mat_gc <- mat_gc_test[-(which(is.na(mat_gc_test[,2]),arr.ind=TRUE)),]
colnames(mat_gc) <- c("Noeud 1", "Noeud 2", "Poids")
matriceGC2 <- subset(mat_gc, mat_gc[,1] < mat_gc[,2])
nodes <- 1:(length(poids)+2)
source <- cbind(c(rep((length(nodes)-1),each=100)),
seq(1:100),
100000)
sink <- cbind(c(rep(length(nodes),each=100)),
3901:4000,
100000)
matriceGC <- rbind(source,matriceGC2,sink)
View(matriceGC)
source <- cbind(c(rep((length(nodes)-1),each=100)),
seq(1:1000),
100000)
sink <- cbind(c(rep(length(nodes),each=100)),
3001:4000,
100000)
matriceGC <- rbind(source,matriceGC2,sink)
View(matriceGC)
matriceGC <- rbind(source,matriceGC2,sink)
matriceGC <- rbind(source,matriceGC2,sink)
source <- cbind(c(rep((length(nodes)-1),each=1000)),
seq(1:1000),
100000)
sink <- cbind(c(rep(length(nodes),each=1000)),
3001:4000,
100000)
matriceGC <- rbind(source,matriceGC2,sink)
View(mat_gc)
View(matriceGC)
library(optrees)
library(igraph)
matrice1 <- matrix(sample(1:10000),100,100)
matrice2 <- matrix(sample(1:10000),100,100)
split_col <- function(mat,y,n.col){
mat2 <- matrix(mat[,y:((y+n.col)-1)],nrow=nrow(mat),ncol=n.col)
return(mat2)
}
patch1A <- split_col(matrice1,1,50)
patch2A <- split_col(matrice1,51,50)
patch1B <- split_col(matrice2,1,50)
patch2B <- split_col(matrice2,51,50)
overlap1 <- patch1A[,31:50]-patch1B[,31:50]
overlap2 <- patch2A[,1:20]-patch2B[,1:20]
poids <- matrix(c(overlap1,overlap2),ncol=(ncol(overlap1)+ncol(overlap2)))
indices <- matrix(1:length(poids),ncol=ncol(poids))
mat.pad <- function(mat1){
na1 <- matrix(NA,ncol=1,nrow=nrow(mat1))
mat2 <- matrix(c(na1,mat1,na1),nrow=nrow(mat1),ncol=ncol(mat1)+2)
na2 <- matrix(NA,nrow=1,ncol=ncol(mat2))
mat3 <- rbind(na2,mat2,na2)
return(mat3)
}
location <- function(matrice){
matrice2 <- mat.pad(matrice)
x <- 1:length(matrice)
ind_row <- 2:(nrow(matrice)+1)
ind_col <- 2:(ncol(matrice)+1)
neigh = rbind(N  = as.vector(matrice2[ind_row - 1, ind_col    ]),
E  = as.vector(matrice2[ind_row    , ind_col + 1]),
S  = as.vector(matrice2[ind_row + 1, ind_col    ]),
W  = as.vector(matrice2[ind_row    , ind_col - 1]))
return(neigh[,x])
}
indice <- function(matrice,x){
n.row2 <- which(matrice==x, arr.ind=TRUE)
n.col2 <- which(matrice==x, arr.ind=TRUE)
n.row <- n.row2[,1]
n.col <- n.col2[,2]
N <- which(matrice==x-1,arr.ind=TRUE)
if (n.row==1) N=c(NA,NA)
E <- which(matrice==x+nrow(matrice),arr.ind=TRUE)
if (n.col==ncol(matrice)) E=c(NA,NA)
S <- which(matrice==x+1,arr.ind=TRUE)
if (n.row==nrow(matrice)) S=c(NA,NA)
W <- which(matrice==x-nrow(matrice),arr.ind=TRUE)
if (n.col==1) W=c(NA,NA)
location_neigh_x <-  matrix(c(N,E,S,W),nrow=4, byrow = TRUE)
row.names(location_neigh_x) <- c("N","E","S","W")
colnames(location_neigh_x) <- c("x","y")
return(location_neigh_x)
}
location <- location(indices)
colnames(location) <- 1:ncol(location)
test_matgc <- function(matrice){
n <- rep(1:length(matrice),each=4)
x <- rep(1:4, times=length(matrice))
test_matgc <- matrix(c(n,location[x,n]))
return(test_matgc)
}
location_poids <- function(matrice){
matrice2 <- mat.pad(matrice)
x <- 1:length(matrice)
ind_row <- 2:(nrow(matrice)+1)
ind_col <- 2:(ncol(matrice)+1)
N  = abs(as.vector(matrice2[ind_row - 1, ind_col    ]) + as.vector(matrice2[ind_row,ind_col]))
E  = abs(as.vector(matrice2[ind_row    , ind_col + 1]) + as.vector(matrice2[ind_row,ind_col]))
S  = abs(as.vector(matrice2[ind_row + 1, ind_col    ]) + as.vector(matrice2[ind_row,ind_col]))
W  = abs(as.vector(matrice2[ind_row    , ind_col - 1]) + as.vector(matrice2[ind_row,ind_col]))
if (length(N) == 0) N=c(NA,NA)
if (length(E) == 0) E=c(NA,NA)
if (length(S) == 0) S=c(NA,NA)
if (length(W) == 0) W=c(NA,NA)
neigh =  rbind(N,E,S,W)
return(neigh[,x])
}
poids2 <- location_poids(poids)
poids3 <- abs(poids2)
n <- rep(1:ncol(location),each=4)
n2 <- rep(1:ncol(poids2),each=4)
x <- seq(1:(length(location)))
x2 <- seq(1:(length(poids2)))
test_matgc <- matrix(c(n,location[x]),ncol=2)
test_poidsgc <- matrix(c(n2,poids3[x]),ncol=2)
mat_gc_test <- cbind(test_matgc,test_poidsgc[,2])
(which(is.na(mat_gc_test[,2]),arr.ind=TRUE))
mat_gc <- mat_gc_test[-(which(is.na(mat_gc_test[,2]),arr.ind=TRUE)),]
colnames(mat_gc) <- c("Noeud 1", "Noeud 2", "Poids")
matriceGC2 <- subset(mat_gc, mat_gc[,1] < mat_gc[,2])
nodes <- 1:(length(poids)+2)
source <- cbind(c(rep((length(nodes)-1),each=100)),
seq(1:100),
100000)
sink <- cbind(c(rep(length(nodes),each=100)),
3901:4000,
100000)
matriceGC <- rbind(source,matriceGC2,sink)
View(matriceGC)
matrice1 <- matrix(seq(1:100),100,100,byrow=T)+runif(10000)
matrice2 <- matrix(seq(1:100),100,100,byrow=T)+runif(10000)
split_col <- function(mat,y,n.col){
mat2 <- matrix(mat[,y:((y+n.col)-1)],nrow=nrow(mat),ncol=n.col)
return(mat2)
}
patch1A <- split_col(matrice1,1,50)
patch2A <- split_col(matrice1,51,50)
patch1B <- split_col(matrice2,1,50)
patch2B <- split_col(matrice2,51,50)
overlap1 <- patch1A[,31:50]-patch1B[,31:50]
overlap2 <- patch2A[,1:20]-patch2B[,1:20]
poids <- matrix(c(overlap1,overlap2),ncol=(ncol(overlap1)+ncol(overlap2)))
indices <- matrix(1:length(poids),ncol=ncol(poids))
mat.pad <- function(mat1){
na1 <- matrix(NA,ncol=1,nrow=nrow(mat1))
mat2 <- matrix(c(na1,mat1,na1),nrow=nrow(mat1),ncol=ncol(mat1)+2)
na2 <- matrix(NA,nrow=1,ncol=ncol(mat2))
mat3 <- rbind(na2,mat2,na2)
return(mat3)
}
location <- function(matrice){
matrice2 <- mat.pad(matrice)
x <- 1:length(matrice)
ind_row <- 2:(nrow(matrice)+1)
ind_col <- 2:(ncol(matrice)+1)
neigh = rbind(N  = as.vector(matrice2[ind_row - 1, ind_col    ]),
E  = as.vector(matrice2[ind_row    , ind_col + 1]),
S  = as.vector(matrice2[ind_row + 1, ind_col    ]),
W  = as.vector(matrice2[ind_row    , ind_col - 1]))
return(neigh[,x])
}
indice <- function(matrice,x){
n.row2 <- which(matrice==x, arr.ind=TRUE)
n.col2 <- which(matrice==x, arr.ind=TRUE)
n.row <- n.row2[,1]
n.col <- n.col2[,2]
N <- which(matrice==x-1,arr.ind=TRUE)
if (n.row==1) N=c(NA,NA)
E <- which(matrice==x+nrow(matrice),arr.ind=TRUE)
if (n.col==ncol(matrice)) E=c(NA,NA)
S <- which(matrice==x+1,arr.ind=TRUE)
if (n.row==nrow(matrice)) S=c(NA,NA)
W <- which(matrice==x-nrow(matrice),arr.ind=TRUE)
if (n.col==1) W=c(NA,NA)
location_neigh_x <-  matrix(c(N,E,S,W),nrow=4, byrow = TRUE)
row.names(location_neigh_x) <- c("N","E","S","W")
colnames(location_neigh_x) <- c("x","y")
return(location_neigh_x)
}
location <- location(indices)
colnames(location) <- 1:ncol(location)
test_matgc <- function(matrice){
n <- rep(1:length(matrice),each=4)
x <- rep(1:4, times=length(matrice))
test_matgc <- matrix(c(n,location[x,n]))
return(test_matgc)
}
location_poids <- function(matrice){
matrice2 <- mat.pad(matrice)
x <- 1:length(matrice)
ind_row <- 2:(nrow(matrice)+1)
ind_col <- 2:(ncol(matrice)+1)
N  = abs(as.vector(matrice2[ind_row - 1, ind_col    ]) + as.vector(matrice2[ind_row,ind_col]))
E  = abs(as.vector(matrice2[ind_row    , ind_col + 1]) + as.vector(matrice2[ind_row,ind_col]))
S  = abs(as.vector(matrice2[ind_row + 1, ind_col    ]) + as.vector(matrice2[ind_row,ind_col]))
W  = abs(as.vector(matrice2[ind_row    , ind_col - 1]) + as.vector(matrice2[ind_row,ind_col]))
if (length(N) == 0) N=c(NA,NA)
if (length(E) == 0) E=c(NA,NA)
if (length(S) == 0) S=c(NA,NA)
if (length(W) == 0) W=c(NA,NA)
neigh =  rbind(N,E,S,W)
return(neigh[,x])
}
poids2 <- location_poids(poids)
poids3 <- abs(poids2)
n <- rep(1:ncol(location),each=4)
n2 <- rep(1:ncol(poids2),each=4)
x <- seq(1:(length(location)))
x2 <- seq(1:(length(poids2)))
test_matgc <- matrix(c(n,location[x]),ncol=2)
test_poidsgc <- matrix(c(n2,poids3[x]),ncol=2)
mat_gc_test <- cbind(test_matgc,test_poidsgc[,2])
(which(is.na(mat_gc_test[,2]),arr.ind=TRUE))
mat_gc <- mat_gc_test[-(which(is.na(mat_gc_test[,2]),arr.ind=TRUE)),]
colnames(mat_gc) <- c("Noeud 1", "Noeud 2", "Poids")
matriceGC2 <- subset(mat_gc, mat_gc[,1] < mat_gc[,2])
nodes <- 1:(length(poids)+2)
source <- cbind(c(rep((length(nodes)-1),each=100)),
seq(1:100),
100000)
sink <- cbind(c(rep(length(nodes),each=100)),
3901:4000,
100000)
matriceGC <- rbind(source,matriceGC2,sink)
View(matriceGC)
matrice1 <- matrix(seq(1:100),100,100,byrow=T)+runif(10000,-1,1)
matrice2 <- matrix(seq(1:100),100,100,byrow=T)+runif(10000,-1,1)
View(matrice1)
matrice1 <- matrix(seq(1:100),100,100,byrow=T)+runif(10000,-1,1)
matrice2 <- matrix(seq(1:100),100,100,byrow=T)+runif(10000,-1,1)
load("~/Bureau/Stage/Codes finaux/tas/mean/annual/fr/env_Qn_no_st_fr.RData")
min(gc_test_Q05_no_st)
load("~/Bureau/Stage/Codes finaux/tas/sd/annual/eur/env_Q05_sd_no_st_eur.RData")
mean(tas_fr_cnrm)
mean(tas_fr_ipsl)
load("~/Bureau/Stage/Codes finaux/tas/sd/annual/eur/env_Qn_sd_no_st_eur.RData")
library(ggplot2)
library(Metrics)
library(cowplot)
library(ncdf4)
nc <- nc_open("t2_erai_clim_1979_2008_var.nc")
tas_erai <- ncvar_get(nc,varid="t2")
nc_close(nc)
tas_fr_erai = rbind(tas_erai[454:480,167:221],tas_erai[1:81,167:221])-273.15
df <- data.frame(quantile = rep(c(2.5,5,7.5,10,12.5,15,17.5,20,22.5,25),each=length(bias_gc_test_Q05_sd_no_st_eur)),
GC =  c(bias_gc_test_Q05_sd_no_st_eur,
bias_gc_test_Q10_sd_no_st_eur,
bias_gc_test_Q15_sd_no_st_eur,
bias_gc_test_Q20_sd_no_st_eur,
bias_gc_test_Q25_sd_no_st_eur,
bias_gc_test_Q30_sd_no_st_eur,
bias_gc_test_Q35_sd_no_st_eur,
bias_gc_test_Q40_sd_no_st_eur,
bias_gc_test_Q45_sd_no_st_eur,
bias_gc_test_Q50_sd_no_st_eur))
colnames(df) <- c("x","y")
df4 <- data.frame (quantile = c(2.5,5,7.5,10,12.5,15,17.5,20,22.5,25),
mean = c(mean(bias_gc_test_Q05_sd_no_st_eur),
mean(bias_gc_test_Q10_sd_no_st_eur),
mean(bias_gc_test_Q15_sd_no_st_eur),
mean(bias_gc_test_Q20_sd_no_st_eur),
mean(bias_gc_test_Q25_sd_no_st_eur),
mean(bias_gc_test_Q30_sd_no_st_eur),
mean(bias_gc_test_Q35_sd_no_st_eur),
mean(bias_gc_test_Q40_sd_no_st_eur),
mean(bias_gc_test_Q45_sd_no_st_eur),
mean(bias_gc_test_Q50_sd_no_st_eur)))
colnames(df4) <- c("x","y")
a <- ggplot(df,aes(x,y)) +
geom_boxplot(data=df,aes(group=x)) +
geom_point(data=df4,shape=18,color="red",size=3) +
geom_hline(yintercept=0,linetype="dashed") +
scale_x_continuous(
"% de points (+/-)",
breaks = c(2.5,5,7.5,10,12.5,15,17.5,20,22.5,25)
) +
scale_y_continuous(
"Biais (°C)"
) +
theme(
axis.line = element_line(color = "black")
) +
labs(
title = "Boxplots",
subtitle = "Méthode utilisée : no_st"
)
b <- ggplot(df,aes(x,y)) +
geom_line(data=df4,color="red",size=2) +
scale_x_continuous(
"% de points (+/-)",
breaks = c(2.5,5,7.5,10,12.5,15,17.5,20,22.5,25)
) +
scale_y_continuous(
"Biais (°C)"
) +
theme(
axis.line = element_line(color = "black")
) +
labs(
title = "Moyennes",
subtitle = "Méthode utilisée : no_st"
)
df2 <- data.frame(quantile = c(2.5,5,7.5,10,12.5,15,17.5,20,22.5,25),
RMSE = c(rmse_Q05_sd_no_st_eur,
rmse_Q10_sd_no_st_eur,
rmse_Q15_sd_no_st_eur,
rmse_Q20_sd_no_st_eur,
rmse_Q25_sd_no_st_eur,
rmse_Q30_sd_no_st_eur,
rmse_Q35_sd_no_st_eur,
rmse_Q40_sd_no_st_eur,
rmse_Q45_sd_no_st_eur,
rmse_Q50_sd_no_st_eur))
colnames(df2) <- c("x","y")
df3 <- data.frame(quantile = c(2.5,5,7.5,10,12.5,15,17.5,20,22.5,25),
cut_cost = c(MinCut_Q05_sd_no_st_eur[['max.flow']],
MinCut_Q10_sd_no_st_eur[['max.flow']],
MinCut_Q15_sd_no_st_eur[['max.flow']],
MinCut_Q20_sd_no_st_eur[['max.flow']],
MinCut_Q25_sd_no_st_eur[['max.flow']],
MinCut_Q30_sd_no_st_eur[['max.flow']],
MinCut_Q35_sd_no_st_eur[['max.flow']],
MinCut_Q40_sd_no_st_eur[['max.flow']],
MinCut_Q45_sd_no_st_eur[['max.flow']],
MinCut_Q50_sd_no_st_eur[['max.flow']]))
colnames(df3) <- c("x","y")
c <- ggplot(df2,aes(x,y)) +
geom_line() +
scale_x_continuous(
"% de points (+/-)",
breaks = c(2.5,5,7.5,10,12.5,15,17.5,20,22.5,25)
) +
scale_y_continuous(
"RMSE"
) +
theme(
axis.line = element_line(color = "black")
) +
labs(
title = "RMSE",
subtitle = "Méthode utilisée : no_st"
)
d <- ggplot(df3,aes(x,y)) +
geom_line() +
scale_x_continuous(
"% de points (+/-)",
breaks = c(2.5,5,7.5,10,12.5,15,17.5,20,22.5,25)
) +
scale_y_continuous(
"Cut cost",
limits=c(min(df3$y),max(df3$y))
) +
theme(
axis.line = element_line(color = "black")
) +
labs(
title = "Cut cost",
subtitle = "Méthode utilisée : no_st"
)
plot_grid(a,b,c,d,ncol = 2, nrow = 2)
setwd("~/Bureau/Stage/Work_space")
